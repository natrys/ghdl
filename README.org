*** GHDL

Download and keep binaries from Github Releases updated.

*** Install

#+begin_src sh
pip install ghdl
#+end_src

Additionally you need to have sqlite and archive tools like tar, gzip etc. installed.

*** About

The advent of technologies like Rust/Golang/Nim, musl libc, better CI/CD workflow etc. mean that many projects are doing multi platform/arch (static) binary releases at github. While distro provided package that correctly links with necessary system libs remains the best choice, sometimes i) the program isn't packaged for your distro ii) you hop between many machines/distros anyway.

Assuming this hadn't been done, unless you are willing to i) package it for every distro you use or for distro agnostic systems like docker, nix/guix ii) and then take on the burden of maintaining it for others, or setup private repo iii) and then track releases and actually rebuild/update it, downloading stuffs from github might actually be more convenient (I mean I hope this isn't false dichotomy, but what are other options? snap/flatpack for a CLI program feels wrong to me, appimage is okay but lacks traction and I don't have very high regard for average quality of an AUR package, still we all should switch to [[https://bedrocklinux.org/][Bedrock Linux]]), but anyway I digress.

The manual interventions necessary to periodically check and download from github could be automated, so that's what I will stick with for now. With this, you can carry just a config file around, maybe even hook it upto a cron and forget.

*** Config

The config file is simple, and is to be provided at =~/.config/ghdl/config=. It looks like:

#+begin_src conf
(repo "containers/crun"
  :url-filter "static")
#+end_src

And when you run ghdl, it will download crun static binary and place it in =~/.local/bin/= (by default). And next time you run ghdl, it won't be downloaded again, unless upstream released new version.

**** Options

These are the options you can specify:

***** =:name= 

Name of the binary to save as, optional. Default is to infer it from repo name, so the name is "crun" when the repo is "containers/crun".

***** =:asset-filter= 

A regular expression that can uniquely identify an asset from a list of them, required. Matching is done case-insensitively.

***** =:filename-glob= 

Most of the time asset is an archive, ghdl automatically extracts it, but needs to know which file to select (usually there are multiple). Note that the glob needs to describe just the basename, and the default is to use =:name= which usually works, e.g.:

#+begin_src conf
(repo "cortesi/devd"
  :asset-filter "linux64")
#+end_src

Here you didn't need to set =:filename-glob= even though the asset is an archive. Because the binary inside the archive is named "devd" anyway. But elsewhere you might need to, e.g.

#+begin_src conf
(repo "kubernetes/kompose"
  :url-filter "linux-amd64.*gz$"
  :basename-glob "kompose*")
#+end_src

***** =:strip=

Whether to strip the downloaded binary or not, default is True. But you may need to set it to False often, say for appimage:

#+begin_src conf
(repo "neovim/neovim"
  :url-filter "appimage$"
  :strip False)
#+end_src

Stripping doesn't have any effect for statically linked binaries. But can reduce the size of Golang stuffs considerably. Although, apparently some distros turn off stripping for Golang because otherwise the binaries behave strangely. Until I can verify that, I am keeping this True by default.

**** Advanced Configuration

The goal is to eventually define something that hopefully can continue to work cross-platform. So ghdl config file is actually Hy code, which means one can do whatever they can in python (some useful modules are loaded already):

#+begin_src conf
(setv my-os (platform.system)
      my-arch (platform.machine))

(when (= my-arch "x86_64") ;; etc
    (setv arch-pattern "(x86[-_]64|amd64)"))

(setv os-arch f"{my-os}[-_]{arch-pattern}")

(repo "caddyserver/caddy"
  :asset-filter f"{os-arch}.*gz")

(repo "hadolint/hadolint"
  :asset-filter os-arch)

(repo "kubernetes/kompose"
  :asset-filter f"{os-arch}.*gz"
  :basename-glob "kompose*")

(repo "digitalocean/doctl"
  :asset-filter os-arch)

#+end_src

If that seems ugly, =:asset-filter= can also be a function (of signature :: =String -> Bool=)

#+begin_src conf
(repo "smallhadroncollider/taskell"
  :asset-filter
    (fn [asset]
      (and
        (in (.replace (platform.machine) "_" "-") asset)
        (in (.lower (platform.system)) asset)
        (.endswith asset ".gz"))))
#+end_src

**** Additional Config

I tried not to trip abuse detector (no async/rate limit etc.) but you should user your own API token if possible. Unauthorized API is only limited to 60 calls per hour, so if you have more than 60 repos you need to use a token anyway.

#+begin_src conf
(config
  :location "~/.local/bin/"
  :token "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
#+end_src

*** TODO/Limitation/Ideas

- Pre-release is not considered
- Some programs use same repo to release different parts of project (e.g. dnote does it for server and cli), ghdl only looks at the last release and can't differentiate between them
- Windows doesn't work (so much for cross-platform), although fix should be simple; I just don't know various xdg path equivalents in it (however one needs to have tar, gzip etc. in the path which means the likes of msys2, git bash, WSL or whatever, and in those it just might work ootb)
- Downloads from github is excessively slow in most parts of the world, nothing I can do about that apart from perhaps switching to an external downloader (like aria2) from current pure python one
