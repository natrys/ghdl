*** GHDL

Download and keep binaries from Github Releases updated across machines with minimal intervention.

*** Install

#+begin_src sh
pip install ghdl
#+end_src

Additionally you need to have sqlite, libmagic and tools pertaining to archive like tar, gzip, unzip etc. installed.

*** About

More and more projects are doing multi platform/arch binary releases at github these days. While distro provided packages remain the best idea, they are not a portable/zero-maintenance solution. When you hop between machines running on different hardware/OS/architecture, it's convenient to just download said binaries. Except doing it manually is tedious. With this tool you can automate it by encapsulating the logic in a config file which you can then carry aroud, maybe even hook up to a cron and forget.

*** Config

The config file is simple, and is to be provided at =~/.config/ghdl/config=. It looks like:

#+begin_src conf
(repo "containers/crun"
  :asset-filter "static")
#+end_src

And when you run ghdl, it will download crun static binary and place it in =~/.local/bin/= (by default). And next time you run ghdl it won't be downloaded again, unless upstream released new version in-between.

**** Options

These are the options you can specify:

***** =:name= 

Name of the binary to save as, optional. Default is to infer it from repo name, so the name is "crun" when the repo is "containers/crun".

***** =:asset-filter= 

A regular expression that can uniquely identify an asset from a list of them, required. Matching is done case-insensitively.

***** =:basename-glob= 

Most of the time asset is an archive, ghdl automatically extracts it, but needs to know which file to select (usually there are multiple). Note that the glob needs to describe just the basename, and the default is to use "=*{:name}*=" which usually works. The fact that it's further ensured with libmagic that the file actually has mime-type "application/*" means I never had to set =:basename-glob= explicity. For example, below you could omit it because the binary is named "devd" which is matched by the glob "\ast{}devd\ast{}" anyway:

#+begin_src conf
(repo "cortesi/devd"
  :asset-filter "linux64"
  :basename-glob "devd") ;; Not necessary
#+end_src

And in the following case, again the binary name "kompose-linux-amd64" is already covered by glob "\ast{}kompose\ast{}":

#+begin_src conf
(repo "kubernetes/kompose"
  :url-filter "linux-amd64.*gz$"
  :basename-glob "kompose*") ;; Not necessary
#+end_src

Sometimes the default is too broad. For example, in case of repo "=github/hub=" the binary is named just "hub" which isn't a problem, but the glob "\ast{}hub\ast{}" matches not just the binary but some other doc file too. Except that's where libmagic comes in and filters out all non-application mimetypes.

#+begin_src conf
(repo "github/hub"
  :asset-filter "linux-amd64"
  :basename-glob "hub") ;; Not necessary
#+end_src

***** =:strip=

Whether to strip the downloaded binary or not, default is True. But you may need to set it to False often, say for appimage:

#+begin_src conf
(repo "neovim/neovim"
  :url-filter "appimage$"
  :strip False)
#+end_src

Stripping can reduce the size of binaries considerably (here the /bin/strip is invoked without argument), but this isn't without trade-off. Apparently some distros turn off stripping for Golang because otherwise the binaries behave strangely. Until I can verify that, I am keeping this True by default.

***** =:prerelease=

You can also choose to live in the edge, some packages for some reason choose to release as pre-release only anyway (so far).

#+begin_src conf
(repo "borkdude/babashka"
  :name "bb"
  :asset-filter "static"
  :prerelease True)
#+end_src

**** Advanced Configuration

The goal is to eventually define something that hopefully can continue to work cross-platform. So ghdl config file is actually Hy code, which means one can do whatever they can in python (some useful modules are loaded already):

#+begin_src conf
(setv my-os (platform.system)
      my-arch (platform.machine))

(if (= my-arch "x86_64")
    (setv arch-pattern "(x86[-_]64|amd64)"))

(setv os-arch f"{my-os}[-_.]{arch-pattern}")

(repo "caddyserver/caddy"
  :asset-filter f"{os-arch}.*gz")

(repo "hadolint/hadolint"
  :asset-filter os-arch)

(repo "kubernetes/kompose"
  :asset-filter f"{os-arch}.*gz"
  :basename-glob "kompose*")

(repo "digitalocean/doctl"
  :asset-filter os-arch)

#+end_src

If that seems ugly, =:asset-filter= can also be a function (of signature :: =String -> Bool=)

#+begin_src conf
(repo "smallhadroncollider/taskell"
  :asset-filter
    (fn [asset]
      (and
        (in (.replace (platform.machine) "_" "-") asset)
        (in (.lower (platform.system)) asset)
        (.endswith asset ".gz"))))
#+end_src

**** Additional Config

I tried not to trip abuse detector (no async/rate limit etc.) but you should user your own API token if possible. Unauthorized API is only limited to 60 calls per hour, so if you have more than 60 repos you need to use a token anyway.

#+begin_src conf
(config
  :location "~/.local/bin/"
  :token "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
#+end_src

*** TODO/Limitation/Ideas

- Some programs use same repo to release different parts of project (e.g. dnote does it for server and cli), ghdl only looks at the last release and can't differentiate between them
- Windows/MacOS doesn't work yet (so much for cross-platform), although fix should be simple; I just don't know various xdg path equivalents in it (however one needs to have tar, gzip etc. in the path which means the likes of msys2, git bash, WSL or whatever, and in those it just might work ootb)
- Downloads from github is excessively slow in most parts of the world, nothing I can do about that apart from perhaps switching to an external downloader (like aria2) from current pure python one
